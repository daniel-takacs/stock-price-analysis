{"version":3,"sources":["Components/ListItems.js","Components/List.js","Components/ReadData.js","Components/Header.js","Components/QuestionA.js","Components/QuestionB_a.js","Components/QuestionB_b.js","Components/BestOpeningDates.js","Components/QuestionC.js","App.js","index.js"],"names":["ListItems","item","Date","Volume","Open","High","Low","List","filteredDateRange","map","id","ReadData","error","isLoaded","setIsLoaded","setItems","setError","useEffect","fetch","then","res","json","result","message","className","Header","startDate","setStartDate","endDate","setEndDate","minDate","maxDate","selected","onChange","date","selectsStart","selectsEnd","QuestionA","mapped","arr","obj","i","length","conv","split","join","closeLastFloat","parseFloat","push","convertingToNumbers","bestStart","curStart","bestLength","curLength","tempArr","j","bullishTrendCalc","upwardElementsConvertedToString","String","bullish","results","key","k","indexOf","dates","values","bullishStart","bullishEnd","QuestionB_a","mappedHighestTradingVolume","highestVolumeArr","volumeToNumber","theHighestVolume","Math","max","theHighestVolumeToString","toString","find","o","undefined","theHighestVolumeDate","Object","QuestionB_b","mappedMostSignificantHigh","mappedMostSignificantLow","highArr","convert","parse","lowArr","diff","a","largest","largestDiff","largestIndex","largestDate","toFixed","BestOpeningDates","sorted","keys","value","QuestionC","mappedOpen","closeLastConvertedToFloatNumber","openConvertedToFloatNumber","openFloat","convertingToNumbersOpen","sum","avr","avrCalc","bestOpenConvertedToString","bestOpeningDatesObj","elem","mappedBestOpenDates","percArr","newObj","forEach","entries","sort","b","reduce","r","v","App","useState","items","convertDate","inputFormat","pad","s","d","getMonth","getDate","getFullYear","convertedStartDate","convertedEndDate","filter","reverse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24a40061.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction ListItems( {item} ) {\r\n    return (\r\n        <>\r\n        <li>Date:{item.Date}</li>\r\n        <li>Close/Last:{item['Close/Last']}</li>\r\n        <li>Volume:{item.Volume}</li>\r\n        <li>Open:{item.Open}</li>\r\n        <li>High:{item.High}</li>\r\n        <li>Low:{item.Low}</li>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default ListItems\r\n","import React from 'react'\r\nimport ListItems from './ListItems'\r\n\r\nfunction List( {filteredDateRange} ) {\r\n    return (\r\n        filteredDateRange.map((item, id)=> (\r\n            <ul key={id}> \r\n                <ListItems item={item}/>\r\n            </ul>\r\n            ))\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React, {useEffect} from \"react\";\r\nimport \"../App.css\";\r\nimport List from \"./List\";\r\n\r\nfunction ReadData({ error, isLoaded, setIsLoaded, setItems, setError, filteredDateRange }) {\r\n\r\n  useEffect(() => {\r\n    fetch(\"./data.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return(\r\n        <div className=\"list\">\r\n          <List filteredDateRange={filteredDateRange}/>\r\n        </div>\r\n        )\r\n      }\r\n  }\r\n  export default ReadData;\r\n","import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction Header({ startDate, setStartDate, endDate, setEndDate }) {\r\n\r\n    return (\r\n        <>\r\n          <h3>Select a date range</h3>\r\n          <DatePicker\r\n            minDate={new Date(\"01-21-2020\")}\r\n            maxDate={new Date(\"01-20-2021\")}\r\n            selected={startDate}\r\n            onChange={date => setStartDate(date)}\r\n            selectsStart\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n          />\r\n          <DatePicker\r\n            minDate={new Date(\"01-21-2020\")}\r\n            maxDate={new Date(\"01-20-2021\")}\r\n            selected={endDate}\r\n            onChange={date => setEndDate(date)}\r\n            selectsEnd\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            minDate={startDate}\r\n          />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","/*\r\nA) How many days was the longest bullish (upward) trend within a given date range?\r\nDefinition of an upward trend shall be: “Closing price of day N is higher than closing price of day N-1”\r\nRead start date and end date of the date range from user input (or pass them as input parameters via the API\r\n    if your MVP does not have an user interface). \r\n    Both start and end date shall be included to the date range.\r\n    Expected output: The max amount of days the stock price was increasing in a row\r\n    Example: In Apple stock historical data the Close/Last price increased 3 days in a row between 01/06/2021 and 01/08/2021. \r\n*/\r\n\r\nimport React from 'react'\r\n\r\nfunction QuestionA({ filteredDateRange }) {\r\n\r\n    //map each close/last values from a given date range\r\n    const mapped = filteredDateRange.map((res) => {\r\n        return res['Close/Last']\r\n    })\r\n\r\n    let arr = []\r\n    //close/last values converting to float numbers\r\n    function convertingToNumbers(obj) {\r\n        for(let i=0;i<obj.length;i++){\r\n            let temp = mapped[i]\r\n            let conv = temp.split('$').join(\"\")\r\n            let closeLastFloat = parseFloat(conv)  \r\n            arr.push(closeLastFloat)\r\n        }\r\n    }\r\n    convertingToNumbers(mapped)\r\n\r\n    let bestStart  = 0;\r\n    let curStart   = 0;\r\n    let bestLength = 1;\r\n    let curLength  = 1;\r\n\r\n    //check upward trend and push element to tempArr array\r\n    let tempArr = []\r\n        function bullishTrendCalc(arr){\r\n            for(let j=0;j<arr.length;j++){\r\n                if(arr[j] > arr[j-1]){\r\n                    curLength++\r\n                    if(curLength > bestLength){\r\n                        bestStart = curStart\r\n                        bestLength = curLength\r\n                    }\r\n                }else {\r\n                    curStart = j\r\n                    curLength = 1\r\n                }\r\n            }\r\n        }\r\n    bullishTrendCalc(arr)\r\n\r\n    for(let i=bestStart; i<bestStart+bestLength;i++){\r\n        tempArr.push(arr[i])\r\n      }\r\n\r\n    //converting upward trend elements in tempArr to string and adding $\r\n\r\n    let upwardElementsConvertedToString = tempArr.map(String)\r\n    let bullish = []\r\n\r\n    for(let i=0;i<upwardElementsConvertedToString.length;i++){\r\n        bullish.push(upwardElementsConvertedToString[i] = \"$\"+ upwardElementsConvertedToString[i])\r\n    }\r\n\r\n    //find upward trend values from a given date range and return Date value\r\n    let results = [];\r\n    \r\n    for(let i=0; i<filteredDateRange.length; i++) {\r\n        for(let key in filteredDateRange[i]) {\r\n            for(let k=0;k<bullish.length;k++){\r\n                if(filteredDateRange[i][key].indexOf(bullish[k])!==-1) {\r\n                    results.push(filteredDateRange[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let dates = []\r\n\r\n    for (let values in results){\r\n        dates.push(results[values].Date)\r\n    }\r\n\r\n    let bullishStart = dates[0]\r\n    let bullishEnd = dates[dates.length-1]\r\n  \r\n    return (\r\n        <div>\r\n            <h2>Question A:</h2>\r\n            <p>In Apple stock historical data the Close/Last price increased <b>{bestLength}days</b> in a row \r\n                between <b>{bullishStart} and {bullishEnd}</b></p>\r\n        </div>\r\n    )\r\n}\r\n    \r\n    export default QuestionA","/*\r\nB) Which dates within a given date range had \r\n\r\na) the highest trading volume and \r\n\r\nb) the most significant stock price change within a day?\r\n\r\nUse High and Low prices to calculate the stock price change within a day. \r\n(Stock price change from 2$ to 1$ is equally significant as change from 1$ to 2$.)\r\nExpected output: List of dates, volumes and price changes. \r\nThe list is ordered by volume and price change. \r\nSo if two dates have the same volume, the one with the more significant price \r\nchange should come first.\r\n\r\n*/\r\nimport React from 'react'\r\n\r\nfunction QuestionB_a({ filteredDateRange }) {\r\n\r\n    const mappedHighestTradingVolume = filteredDateRange.map((res)=> {\r\n        return res.Volume\r\n    })\r\n\r\n    let highestVolumeArr = []\r\n    \r\n    function convertingToNumbers(obj) {\r\n        for(let i=0;i<obj.length;i++){\r\n            let temp = mappedHighestTradingVolume[i]\r\n            let conv = temp.split('').join(\"\")\r\n            let volumeToNumber = parseFloat(conv)  \r\n            highestVolumeArr.push(volumeToNumber)\r\n        }\r\n    }\r\n    convertingToNumbers(mappedHighestTradingVolume)\r\n\r\n    let theHighestVolume = Math.max(...highestVolumeArr)\r\n    let theHighestVolumeToString = theHighestVolume.toString()\r\n\r\n    let obj = filteredDateRange.find(o => o.Volume === theHighestVolumeToString);\r\n\r\n    if (obj === undefined || null) return <h2>...Loading</h2>\r\n\r\n    let theHighestVolumeDate = Object.values(obj)[0]\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h2>Question B:</h2>\r\n            <p>The highest trading volume: <b>${theHighestVolume}</b> was on <b>{theHighestVolumeDate}</b></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionB_a\r\n","/*\r\nB) Which dates within a given date range had \r\n\r\na) the highest trading volume and \r\n\r\nb) the most significant stock price change within a day?\r\n\r\nUse High and Low prices to calculate the stock price change within a day. \r\n(Stock price change from 2$ to 1$ is equally significant as change from 1$ to 2$.)\r\nExpected output: List of dates, volumes and price changes. \r\nThe list is ordered by volume and price change. \r\nSo if two dates have the same volume, the one with the more significant price \r\nchange should come first.\r\n\r\n*/\r\nimport React from 'react'\r\n\r\nfunction QuestionB_b( {filteredDateRange} ) {\r\n\r\n    const mappedMostSignificantHigh = filteredDateRange.map((res)=> {\r\n        return res.High;\r\n    })\r\n\r\n    const mappedMostSignificantLow = filteredDateRange.map((res)=> {\r\n        return res.Low;\r\n    })\r\n   \r\n    //converting string to float number\r\n    let highArr = []\r\n    for (let i=0;i<mappedMostSignificantHigh.length;i++) {\r\n        let temp = mappedMostSignificantHigh[i]\r\n        let convert = temp.split('$').join(\"\")\r\n        let parse = parseFloat(convert)\r\n        highArr.push(parse)\r\n    }\r\n\r\n    let lowArr = []\r\n    for (let i=0;i<mappedMostSignificantLow.length;i++) {\r\n        let temp = mappedMostSignificantLow[i]\r\n        let convert = temp.split('$').join(\"\")\r\n        let parse = parseFloat(convert)\r\n        lowArr.push(parse)\r\n    }\r\n    //calculate difference\r\n    let diff = highArr.map((a, i) => a - lowArr[i])\r\n\r\n    //searching the largest difference\r\n    let largest = 0\r\n    function largestDiff(arr){\r\n        for(let i=0; i<arr.length;i++){\r\n            if(arr[i] > largest){\r\n                largest = arr[i]\r\n            }\r\n        }\r\n        return largest\r\n    }\r\n\r\n    largestDiff(diff)\r\n\r\n    let largestIndex = diff.indexOf(largest)\r\n    \r\n    let date = filteredDateRange.map((a)=> {\r\n        return a.Date\r\n    })\r\n    let largestDate = date[largestIndex]\r\n\r\n    return (\r\n        <div>\r\n            The most significant stock price change : <b>${largest.toFixed(2)} on {largestDate}</b>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionB_b\r\n","import React from 'react'\r\n\r\nfunction BestOpeningDates({ sorted }) {\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {Object.keys(sorted).map((date, value)=> \r\n                <li key={value}>{date}: <b>{sorted[date]}%</b></li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BestOpeningDates\r\n","/*\r\nC) Within a given date range, which dates had the best opening price compared to 5 days \r\nsimple moving average (SMA 5)?\r\n\r\nCalculate simple moving average for day N using the average value of closing prices between \r\ndays N-1 to N-5.\r\nCalculate how many percentages (%) is the difference between the opening price of the day \r\nand the calculated SMA 5 price of the day.\r\nExpected output: List of dates and price change percentages. The list is ordered by price \r\nchange percentages.\r\n\r\n*/\r\nimport React from 'react'\r\nimport BestOpeningDates from './BestOpeningDates'\r\n\r\nfunction QuestionC( {filteredDateRange} ) {\r\n    //map to filtered data and return close/last value as a string \r\n    let mapped = filteredDateRange.map((res) => {\r\n        return res['Close/Last']\r\n    })\r\n    //map to filtered data and return \"Open\" value as a string \r\n    let mappedOpen = filteredDateRange.map((res) => {\r\n        return res.Open\r\n    })\r\n\r\n    //converting \"Close/Last\" values to number\r\n    let closeLastConvertedToFloatNumber = []\r\n\r\n    function convertingToNumbers(obj) {\r\n        for(let i=0;i<obj.length;i++){\r\n            let temp = mapped[i]\r\n            let conv = temp.split('$').join(\"\")\r\n            let closeLastFloat = parseFloat(conv)  \r\n            closeLastConvertedToFloatNumber.push(closeLastFloat)\r\n        }\r\n    }\r\n    convertingToNumbers(mapped)\r\n    \r\n    //converting \"Open\" values to number\r\n    let openConvertedToFloatNumber = []\r\n\r\n    function convertingToNumbersOpen(obj) {\r\n        for(let i=0;i<obj.length;i++){\r\n            let temp = mappedOpen[i]\r\n            let conv = temp.split('$').join(\"\")\r\n            let openFloat = parseFloat(conv)  \r\n            openConvertedToFloatNumber.push(openFloat)\r\n        }\r\n    }\r\n    convertingToNumbersOpen(mappedOpen)\r\n\r\n    //calculate simple moving average 5 days\r\n    let sum = 0\r\n    let avr = 0\r\n\r\n    function avrCalc(){\r\n        for(let i=0;i<5;i++){\r\n            sum = sum + closeLastConvertedToFloatNumber[i]\r\n        }\r\n        return avr = (sum / 5).toFixed(2)\r\n    }\r\n    avrCalc()\r\n\r\n    //pushing \"Open\" values those bigger than average to tempArr     \r\n    let tempArr = []\r\n    for(let i=0;i<openConvertedToFloatNumber.length; i++){\r\n        if(openConvertedToFloatNumber[i] > avr) {\r\n            tempArr.push(openConvertedToFloatNumber[i])\r\n        }\r\n    }\r\n    \r\n    let bestOpenConvertedToString = tempArr.map(String)\r\n\r\n    for(let i=0;i<bestOpenConvertedToString.length;i++){\r\n         bestOpenConvertedToString[i] = \"$\"+ bestOpenConvertedToString[i]\r\n    }\r\n\r\n    //find best open from tempArr and return Date of object\r\n    let bestOpeningDatesObj = [];\r\n    \r\n        filteredDateRange.find(function(elem){\r\n        for(let i=0;i<bestOpenConvertedToString.length;i++){\r\n            if(elem.Open === bestOpenConvertedToString[i]){\r\n            bestOpeningDatesObj.push(elem)\r\n            }\r\n        }\r\n    })\r\n\r\n    //calculating percentages\r\n    let mappedBestOpenDates = bestOpeningDatesObj.map((date)=> {\r\n        return date.Date\r\n    })\r\n\r\n    let percArr = []\r\n    for(let i=0; i<tempArr.length; i++){\r\n        percArr.push((100-(avr/tempArr[i]*100)).toFixed(2))\r\n    }\r\n    \r\n    //elements from mappedBestOpenDates and percArr moving to newObj\r\n    let newObj = [];\r\n    mappedBestOpenDates.forEach((key, i) => {\r\n        newObj[key] = percArr[i]\r\n    });\r\n    \r\n    let sorted = Object.entries(newObj)\r\n        .sort(([,a],[,b]) => parseFloat(a)-parseFloat(b))\r\n        .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});\r\n\r\n        return (\r\n            <div>\r\n                <h2>Question C:</h2>\r\n                <p>Average value of closing price between a given date range: <b>${avr}</b></p>\r\n                <p>List of best opening price dates and price change percentages \r\n                    between the opening price of the day \r\n                    and the calculated SMA 5 price of the day:</p>\r\n                <BestOpeningDates bestOpeningDatesObj={bestOpeningDatesObj} sorted={sorted} newObj={newObj}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    export default QuestionC\r\n","import React, {useState} from 'react'\r\nimport ReadData from './Components/ReadData'\r\nimport Header from './Components/Header'\r\nimport QuestionA from './Components/QuestionA'\r\nimport QuestionB_a from './Components/QuestionB_a'\r\nimport QuestionB_b from './Components/QuestionB_b'\r\nimport QuestionC from './Components/QuestionC'\r\n\r\nfunction App() {\r\n\r\n  const [startDate, setStartDate] = useState(new Date(\"2020/01/21\"));\r\n  const [endDate, setEndDate] = useState(new Date(\"2020/01/21\"));\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  function convertDate(inputFormat) {\r\n    function pad(s) { return (s < 10) ? '0' + s : s; }\r\n      let d = new Date(inputFormat);\r\n      return [ pad(d.getMonth()+1), pad(d.getDate()), d.getFullYear()].join('/');\r\n  }\r\n  \r\n  let convertedStartDate = convertDate(startDate);\r\n  let convertedEndDate = convertDate(endDate);\r\n  \r\n  let filteredDateRange = items.filter((item)=> {\r\n    return item.Date >= convertedStartDate && item.Date <= convertedEndDate\r\n  })\r\n  filteredDateRange.reverse()\r\n  \r\n  return (\r\n    <div>\r\n      <Header \r\n        startDate={startDate} \r\n        setStartDate={setStartDate} \r\n        endDate={endDate} \r\n        setEndDate={setEndDate}/>\r\n      <ReadData \r\n        filteredDateRange={filteredDateRange}\r\n        error={error}\r\n        setError={setError}\r\n        isLoaded={isLoaded}\r\n        setIsLoaded={setIsLoaded}\r\n        items={items}\r\n        setItems={setItems}/>\r\n      <QuestionA \r\n        convertedEndDate={convertedEndDate}\r\n        filteredDateRange={filteredDateRange}\r\n        items={items} \r\n        convertedStartDate={convertedStartDate}/>\r\n      <QuestionB_a \r\n        convertedEndDate={convertedEndDate}\r\n        filteredDateRange={filteredDateRange}\r\n        items={items} \r\n        startDate={startDate} \r\n        setEndDate={setEndDate}/>\r\n      <QuestionB_b \r\n        filteredDateRange={filteredDateRange}\r\n        items={items} \r\n        startDate={startDate} \r\n        setEndDate={setEndDate}/>\r\n      <QuestionC \r\n        filteredDateRange={filteredDateRange}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}